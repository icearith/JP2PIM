/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gui;

import com.client.ClientDeamon;
import com.client.ClientInputStream;
import com.common.Buddy;
import com.common.FileReveiveDeamon;
import com.common.FileSend;
import com.common.Message;
import com.common.MessageContent;
import com.common.MessageStyle;
import com.server.ServerDaemon;
import com.server.ServerInputStream;
import com.server.ServerOutputStream;
import java.io.File;
import java.io.IOException;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;

/**
 *
 * @author arith
 */
public class ChatFrame extends javax.swing.JFrame {

    /**
     * Creates new form ChatFrame
     */
    public ChatFrame(List<Buddy> buddyList, Buddy myself) {
        initComponents();
        this.buddyList = buddyList;
        Iterator iterator = buddyList.iterator();
        DefaultListModel listModel = new DefaultListModel();

        while (iterator.hasNext()) {
            Buddy buddy = (Buddy) iterator.next();
            String element = buddy.getNickName() + "-" + buddy.getIpAdress() + "-" + buddy.getServerPort();
            listModel.addElement(element);
            this.jListFriendsList.setModel(listModel);
        }
        this.jListFriendsList.updateUI();

        daemon = new ClientDeamon(buddyList, generateTypedMessage(), this);


        this.myself = myself;
        this.fileReveiveListModel = new DefaultListModel();
        this.fileSendListModel = new DefaultListModel();
    }

    public ChatFrame(Buddy buddy, Socket socket, Buddy myself, MainFrame mainWindow) {

        initComponents();
        String element = buddy.getNickName() + "-" + buddy.getIpAdress() + "-" + buddy.getServerPort();
        DefaultListModel listModel = new DefaultListModel();
        listModel.addElement(element);
        this.jListFriendsList.setModel(listModel);
        this.jListFriendsList.updateUI();
        this.socket = socket;
        this.mainWindow = mainWindow;
        daemon = new ServerDaemon(socket, this, mainWindow);
        this.myself = myself;
        this.fileReveiveListModel = new DefaultListModel();
        this.fileSendListModel = new DefaultListModel();

    }

    public ChatFrame() {
        initComponents();


    }

    public void updateFileReceiveList(String fileName) {

        this.fileReveiveListModel.addElement(fileName);
        this.jListFileReceive.setModel(fileReveiveListModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        fileChooser = new javax.swing.JFileChooser();
        jOptionPane = new javax.swing.JOptionPane();
        PanelChat = new javax.swing.JPanel();
        ButtonCloseChatWindow = new javax.swing.JButton();
        ButtonSendTypedMessage = new javax.swing.JButton();
        SeparatorBetweenTypedMessageAndMessageHistory = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaEditingMessage = new javax.swing.JTextArea();
        jScrollPaneChattingHistory = new javax.swing.JScrollPane();
        jTextPaneChattingHistory = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListFriendsList = new javax.swing.JList();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButtonChooseFiles = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListSendFiles = new javax.swing.JList();
        jButtonSend = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListFileReceive = new javax.swing.JList();

        fileChooser.setMultiSelectionEnabled(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("P2P Instant Messager - name - IP");
        setResizable(false);

        PanelChat.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        ButtonCloseChatWindow.setText("Cancel");
        ButtonCloseChatWindow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ButtonCloseChatWindowMouseClicked(evt);
            }
        });
        ButtonCloseChatWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCloseChatWindowActionPerformed(evt);
            }
        });

        ButtonSendTypedMessage.setText("Send");
        ButtonSendTypedMessage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ButtonSendTypedMessageMouseClicked(evt);
            }
        });

        jTextAreaEditingMessage.setColumns(20);
        jTextAreaEditingMessage.setLineWrap(true);
        jTextAreaEditingMessage.setRows(5);
        jScrollPane2.setViewportView(jTextAreaEditingMessage);

        jTextPaneChattingHistory.setBorder(null);
        jScrollPaneChattingHistory.setViewportView(jTextPaneChattingHistory);

        org.jdesktop.layout.GroupLayout PanelChatLayout = new org.jdesktop.layout.GroupLayout(PanelChat);
        PanelChat.setLayout(PanelChatLayout);
        PanelChatLayout.setHorizontalGroup(
            PanelChatLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(SeparatorBetweenTypedMessageAndMessageHistory)
            .add(PanelChatLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(ButtonCloseChatWindow)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ButtonSendTypedMessage)
                .addContainerGap())
            .add(jScrollPane2)
            .add(jScrollPaneChattingHistory, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 416, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        PanelChatLayout.setVerticalGroup(
            PanelChatLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(PanelChatLayout.createSequentialGroup()
                .add(jScrollPaneChattingHistory, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 293, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(SeparatorBetweenTypedMessageAndMessageHistory, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(PanelChatLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ButtonCloseChatWindow)
                    .add(ButtonSendTypedMessage)))
        );

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jListFriendsList.setOpaque(false);
        jScrollPane1.setViewportView(jListFriendsList);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jButtonChooseFiles.setText("Choose Files");
        jButtonChooseFiles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonChooseFilesMouseClicked(evt);
            }
        });
        jButtonChooseFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChooseFilesActionPerformed(evt);
            }
        });

        jListSendFiles.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jListSendFiles.setOpaque(false);
        jScrollPane3.setViewportView(jListSendFiles);

        jButtonSend.setText("Send");
        jButtonSend.setEnabled(false);
        jButtonSend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSendMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jButtonChooseFiles)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonSend)
                .addContainerGap(30, Short.MAX_VALUE))
            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonChooseFiles)
                    .add(jButtonSend))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Send Files", jPanel1);

        jListFileReceive.setOpaque(false);
        jScrollPane4.setViewportView(jListFileReceive);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Receive Files", jPanel2);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(PanelChat, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1)
                    .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(PanelChat, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 308, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane1)))
                .addContainerGap())
        );

        pack();
    }//GEN-END:initComponents

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {

        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
//                System.out.println(fileChooser.getSelectedFile().toString());
                files = fileChooser.getSelectedFiles();

                System.out.println(files[0].getPath());
                int i = 0;
                String[] fileNames = new String[files.length];
                fileSendListModel.removeAllElements();
                while (i < files.length) {
                    fileNames[i] = files[i].getName();
                    fileSendListModel.addElement(fileNames[i]);
                    i++;
                }

                this.jListSendFiles.setModel(fileSendListModel);
                this.jButtonSend.setEnabled(true);



            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        } else {
        }
    }

    private void ButtonCloseChatWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCloseChatWindowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ButtonCloseChatWindowActionPerformed

    private Message generateTypedMessage() {

        MessageContent messageContent = new MessageContent(this.jTextAreaEditingMessage.getText(), new Date());
        MessageStyle messageStyle = new MessageStyle();
        Message message = new Message(myself, messageContent, messageStyle);

        return message;
    }
    private void ButtonSendTypedMessageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ButtonSendTypedMessageMouseClicked

        if (!this.jTextAreaEditingMessage.getText().equals("")) {
            try {
                Message message = generateTypedMessage();
                archiveChattingHistory(message);

                if (daemon instanceof ClientDeamon) {
                    ((ClientDeamon) daemon).setMessage(message);
                    new Thread((ClientDeamon) daemon).start();
                } else if (daemon instanceof ServerDaemon) {
                    new Thread(new ServerOutputStream(socket, message)).start();
                }

            } catch (Exception ex) {
                Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            new JOptionPane().showMessageDialog(new JFrame(), "Empty message!");
            
        }




    }//GEN-LAST:event_ButtonSendTypedMessageMouseClicked

    private void ButtonCloseChatWindowMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ButtonCloseChatWindowMouseClicked
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_ButtonCloseChatWindowMouseClicked

    private void jButtonChooseFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChooseFilesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonChooseFilesActionPerformed

    private void jButtonChooseFilesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonChooseFilesMouseClicked
        // TODO add your handling code here:
        DefaultListModel tmp = new DefaultListModel();
        this.jListSendFiles.setModel(tmp);
        this.jListSendFiles.updateUI();
        OpenActionPerformed(null);
    }//GEN-LAST:event_jButtonChooseFilesMouseClicked

    private void jButtonSendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSendMouseClicked
        // TODO add your handling code here:  
        try {
            this.sendFiles(buddyList, files);
            this.jButtonSend.setEnabled(false);
        } catch (Exception e) {
            e.getMessage();
        }
    }//GEN-LAST:event_jButtonSendMouseClicked

    private void sendFiles(List<Buddy> buddyList, File[] files) throws UnknownHostException, IOException {

        Iterator<Buddy> iterator = buddyList.iterator();
        while (iterator.hasNext()) {
            Buddy buddy = iterator.next();
            int i = 0;
            while (i < files.length) {
                Socket so = new Socket(buddy.getIpAdress(), buddy.getServerPort() + 1);
                new Thread(new FileSend(this, i, files[i], so)).start();
                i++;
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatFrame().setVisible(true);
            }
        });
    }

    public void archiveChattingHistory(Message message) {
        try {
            this.jTextPaneChattingHistory.getDocument().insertString(jTextPaneChattingHistory.getDocument().getLength(), message.getMessagePattern(), null);
            this.jTextAreaEditingMessage.setText(null);
            this.jTextPaneChattingHistory.setCaretPosition(this.jTextPaneChattingHistory.getDocument().getLength());
        } catch (BadLocationException ex) {
            Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private List<Buddy> buddyList;

    public List<Buddy> getBuddyList() {
        return buddyList;
    }

    public void setBuddyList(List<Buddy> buddyList) {
        this.buddyList = buddyList;
    }

    public void switchToFileReceiveTab() {
        this.jListFileReceive.setSelectedIndex(1);
        this.jListFileReceive.updateUI();
    }

    public void updateSendFileListView(String fileName, int id, int rate) {

        try {
            this.fileSendListModel.set(id, fileName + "(" + rate + "%)");
            this.jListSendFiles.setModel(fileSendListModel);
        } catch (Exception e) {
        }
    }

    public void updateReceiveFileListView(String fileName, int id, int rate) {
        try {
            this.fileReveiveListModel.set(id, fileName + "(" + rate + "%%)");
            this.jListFileReceive.setModel(fileReveiveListModel);

        } catch (Exception e) {
            System.out.println(e.getStackTrace());
        }
    }
    private Object daemon;
    private Buddy myself;
    private ChatFrame chatWindow;
    private Socket socket;
    private DefaultListModel fileReveiveListModel;
    private DefaultListModel fileSendListModel;
    private File[] files;
    private MainFrame mainWindow;

    public ChatFrame getChatWindow() {
        return chatWindow;
    }

    public void setChatWindow(ChatFrame chatWindow) {
        this.chatWindow = chatWindow;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonCloseChatWindow;
    private javax.swing.JButton ButtonSendTypedMessage;
    private javax.swing.JPanel PanelChat;
    private javax.swing.JSeparator SeparatorBetweenTypedMessageAndMessageHistory;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JButton jButtonChooseFiles;
    private javax.swing.JButton jButtonSend;
    private javax.swing.JList jListFileReceive;
    private javax.swing.JList jListFriendsList;
    private javax.swing.JList jListSendFiles;
    private javax.swing.JOptionPane jOptionPane;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPaneChattingHistory;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextAreaEditingMessage;
    private javax.swing.JTextPane jTextPaneChattingHistory;
    // End of variables declaration//GEN-END:variables

    public DefaultListModel getFileReveiveListModel() {
        return fileReveiveListModel;
    }

    public void setFileReveiveListModel(DefaultListModel fileReveiveListModel) {
        this.fileReveiveListModel = fileReveiveListModel;
    }

    public DefaultListModel getFileSendListModel() {
        return fileSendListModel;
    }

    public void setFileSendListModel(DefaultListModel fileSendListModel) {
        this.fileSendListModel = fileSendListModel;
    }
}
